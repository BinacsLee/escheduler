// Code generated by MockGen. DO NOT EDIT.
// Source: relation.go

// Package mock_framework is a generated GoMock package.
package mock_framework

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRelationAttr is a mock of RelationAttr interface.
type MockRelationAttr struct {
	ctrl     *gomock.Controller
	recorder *MockRelationAttrMockRecorder
}

// MockRelationAttrMockRecorder is the mock recorder for MockRelationAttr.
type MockRelationAttrMockRecorder struct {
	mock *MockRelationAttr
}

// NewMockRelationAttr creates a new mock instance.
func NewMockRelationAttr(ctrl *gomock.Controller) *MockRelationAttr {
	mock := &MockRelationAttr{ctrl: ctrl}
	mock.recorder = &MockRelationAttrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelationAttr) EXPECT() *MockRelationAttrMockRecorder {
	return m.recorder
}

// MockRelation is a mock of Relation interface.
type MockRelation struct {
	ctrl     *gomock.Controller
	recorder *MockRelationMockRecorder
}

// MockRelationMockRecorder is the mock recorder for MockRelation.
type MockRelationMockRecorder struct {
	mock *MockRelation
}

// NewMockRelation creates a new mock instance.
func NewMockRelation(ctrl *gomock.Controller) *MockRelation {
	mock := &MockRelation{ctrl: ctrl}
	mock.recorder = &MockRelationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelation) EXPECT() *MockRelationMockRecorder {
	return m.recorder
}

// GetFrom mocks base method.
func (m *MockRelation) GetFrom() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFrom")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFrom indicates an expected call of GetFrom.
func (mr *MockRelationMockRecorder) GetFrom() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFrom", reflect.TypeOf((*MockRelation)(nil).GetFrom))
}

// GetName mocks base method.
func (m *MockRelation) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockRelationMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockRelation)(nil).GetName))
}

// GetTo mocks base method.
func (m *MockRelation) GetTo() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTo")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTo indicates an expected call of GetTo.
func (mr *MockRelationMockRecorder) GetTo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTo", reflect.TypeOf((*MockRelation)(nil).GetTo))
}

// SetFrom mocks base method.
func (m *MockRelation) SetFrom(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFrom", arg0)
}

// SetFrom indicates an expected call of SetFrom.
func (mr *MockRelationMockRecorder) SetFrom(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFrom", reflect.TypeOf((*MockRelation)(nil).SetFrom), arg0)
}

// SetName mocks base method.
func (m *MockRelation) SetName(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetName", arg0)
}

// SetName indicates an expected call of SetName.
func (mr *MockRelationMockRecorder) SetName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetName", reflect.TypeOf((*MockRelation)(nil).SetName), arg0)
}

// SetTo mocks base method.
func (m *MockRelation) SetTo(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTo", arg0)
}

// SetTo indicates an expected call of SetTo.
func (mr *MockRelationMockRecorder) SetTo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTo", reflect.TypeOf((*MockRelation)(nil).SetTo), arg0)
}

// String mocks base method.
func (m *MockRelation) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockRelationMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockRelation)(nil).String))
}
